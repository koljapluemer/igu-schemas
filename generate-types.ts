import { compile, Options } from 'json-schema-to-typescript'
import * as fs from 'fs'
import * as path from 'path'

async function generateTypes() {
  const schema = JSON.parse(fs.readFileSync('schema.json', 'utf8'))
  
  // Add Data suffix to all type names in the schema
  const addDataSuffix = (obj: any) => {
    if (obj && typeof obj === 'object') {
      if (obj.$ref && typeof obj.$ref === 'string') {
        // Only add Data suffix to specific types
        const typeName = obj.$ref.match(/#\/definitions\/([^"]+)/)?.[1]
        if (typeName === 'exerciseTemplate' || typeName === 'lesson') {
          obj.$ref = obj.$ref.replace(/#\/definitions\/([^"]+)/, '#/definitions/$1Data')
        }
      }
      Object.values(obj).forEach(addDataSuffix)
    }
  }
  addDataSuffix(schema)

  const types = await compile(schema, 'SchemaData', {
    bannerComment: '// This file was automatically generated from schema.json\n// Do not edit this file directly\n',
    style: {
      singleQuote: true,
      semi: true,
    }
  } as Partial<Options>)

  // Transform the generated types to add Data suffix
  const transformedTypes = types
    .replace(/interface ExerciseTemplate(?!Data)/g, 'interface ExerciseTemplateData')
    .replace(/interface Lesson(?!Data)/g, 'interface LessonData')
    .replace(/ExerciseTemplate(?!Data)\[/g, 'ExerciseTemplateData[')
    .replace(/Lesson(?!Data)\[/g, 'LessonData[')

  fs.writeFileSync('types.ts', transformedTypes)
  console.log('Types generated successfully!')
}

generateTypes().catch(console.error) 